1) WAF and return arr so that it only contains elements that sum to the value of 10.
const arr = [2, 4, 5, 1, 7, 5, 2, 1];


Solution:
---------
  const arr = [2, 4, 5, 1, 7, 5, 2, 1];
function fnArr() {
  arr.splice(0, 1);
  arr.splice(3);
  return arr;
}

console.log(fnArr());



-------------------------------------------------------------------------------------
2) WAF which takes arr, a nested array, and elem as arguments, and returns a new array 
such that any array nested within arr containing elem has been removed.

Note:
-------
elem represents an element that may or may not be present on one or more of the arrays 
nested within arr.
use for loop


function filteredArray(arr, elem) {
  let newArr = [];
     for(var i=0;i<arr.length;i++){
         if(arr[i].indexOf(elem)=== -1){
            newArr.push(arr[i])
         }
     }
  return newArr;
}

console.log(filteredArray([[3, 2, 3], [1, 6, 3], [3, 13, 26], [19, 3, 9]], 3));

--------------------------------------------------------------------------------------------------
3) WAF which accepts one argument (a users object) and 
return the number of users whose online property 
is set to true.
const users = {
  Alan: {
    online: false
  },
  Jeff: {
    online: true
  },
  Sarah: {
    online: true
  }
}



Solution:
--------
const users = {
  Alan: {
    online: false
  },
  Jeff: {
    online: true
  },
  Sarah: {
    online: true
  }
}

function countOnline(usersObj) {

  let count =0
   for(let user in usersObj){
        if(usersObj[user].online){
         count = count +1
        }
        
   }
   return count
 
}

console.log(countOnline(users));
---------------------------------------------------------------------------------------
4) WAF so that it returns an 
array containing all the properties in the object it receives as an argument.
using For..in and Object.keys()

let users = {
  Alan: {
    age: 27,
    online: false
  },
  Jeff: {
    age: 32,
    online: true
  },
  Sarah: {
    age: 48,
    online: false
  },
  Ryan: {
    age: 19,
    online: true
  }
};

Solution
---------


function getArrayOfUsers(obj) {
    var arr = []
    for(let key in obj){
       arr.push(key)
    }
    return arr
}

console.log(getArrayOfUsers(users));
----------------------------------------------------------------------------------
5)  
The user object contains three keys. The data key contains five keys, 
one of which contains an array of friends. From this, you can see how flexible 
objects are as data structures.
WAF so that it takes a user object and adds the name of the 
friend argument to the array stored in friends Property and returns that Friends Property Value.

Solution
--------
let user = {
  name: 'Kenneth',
  age: 28,
  data: {
    username: 'kennethCodesAllDay',
    joinDate: 'March 26, 2016',a
    organization: 'freeCodeCamp',
    friends: [
      'Sam',
      'Kira',
      'Tomo'
    ],
    location: {
      city: 'San Francisco',
      state: 'CA',
      country: 'USA'
    }
  }
};

function addFriend(userObj, friend) {
 
 userObj.data.friends.push(friend);
  
  return userObj.data.friends;
 
}

console.log(addFriend(user, 'Pete'));
---------------------------------------------------------------------------------------------

6) Find the Factorial of Given number
Solution
========
function factorialize(num) {
  if(num === 0 ){
    num=1
  } else {
    for(let i=num;i >1;i--){
      num = (i-1) *num

    }
  }
  return num;
}

factorialize(5);

----------------------------------------------------------------------------------------
7) WAF  so that it returns true if the object passed 
to it contains Property key as Alan, Jeff, Sarah and Ryan and returns false if it does not contain any one of the 
following keys or any different key
let users = {
  Alan: {
    age: 27,
    online: true,
  },
  Jeff: {
    age: 32,
    online: true,
  },
  Sarah: {
    age: 48,
    online: true,
  },
  Ryan: {
    age: 19,
    online: true,
  },
};


Solution
--------
let users = {
  Alan: {
    age: 27,
    online: true,
  },
  Jeff: {
    age: 32,
    online: true,
  },
  Sarah: {
    age: 48,
    online: true,
  },
  Ryan: {
    age: 19,
    online: true,
  },
};

function isEveryoneHere(userObj) {
  // Only change code below this line
  var status;
  var temp = [];
  var arr = Object.keys(userObj);

  arr.forEach(function (ele) {
    if (ele === "Alan" || ele === "Jeff" || ele === "Sarah" || ele === "Ryan") {
      temp.push(true);
    } else {
      temp.push(false);
    }
  });
  return !temp.includes(false);
  // Only change code above this line
}

console.log(isEveryoneHere(users));
---------------------------------------------------------------------------------
soluion:
--------
function repeatStringNumTimes(str, num) {
var strr = str
     if(num <= 0){
       return ''
     } else {
       for(var i=2;i<=num;i++){
            strr = str +strr    
              console.log(strr)
       }
       return strr
     }
}

repeatStringNumTimes("abc", 3);
====================================================================================


solution:
---------
function truthCheck(collection, pre) {
  var temp = []
   collection.forEach(function(ele){
       if(ele[pre]){
     temp.push(true)
       } else {
         temp.push(false)
       }
   })
  return !temp.includes(false)
}